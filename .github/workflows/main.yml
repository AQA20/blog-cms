name: CI/CD Pipeline

on:
  push:
    branches: [main, test]

jobs:
  create_branch_directory:
    runs-on: self-hosted
    steps:
      - name: Create and Navigate to Branch Directory
        run: |
          mkdir -p ${{ github.ref_name }}

  install_dependencies:
    runs-on: self-hosted
    needs: create_branch_directory
    outputs:
      node_modules: ${{ steps.cache_node_modules.outputs.cache-hit }}
    defaults:
      run:
        working-directory: ${{ github.ref_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          path: ${{ github.ref_name }}

      - name: Cache npm dependencies
        id: cache_node_modules
        uses: actions/cache@v4
        with:
          path: ${{ github.ref_name }}/node_modules
          key: ${{ runner.os }}-${{ github.ref_name }}-npm-deps-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: ${{ runner.os }}-${{ github.ref_name }}-npm-deps-${{ hashFiles('**/package-lock.json') }}-

      - name: Install npm dependencies
        run: npm ci --legacy-peer-deps
        if: steps.cache_node_modules.outputs.cache-hit != 'true'

  tests:
    runs-on: self-hosted
    needs: install_dependencies
    defaults:
      run:
        working-directory: ${{ github.ref_name }}
    steps:
      - name: Run Linting
        run: npm run lint

      - name: Run Tests
        run: npm run test
        env:
          NEXT_PUBLIC_NEXT_ENVIRONMENT: ${{ github.ref_name == 'main' && 'production' || 'testing' }}
          NEXT_PUBLIC_API_URL: ${{ github.ref_name == 'main' && secrets.NEXT_PUBLIC_API_URL || secrets.NEXT_PUBLIC_API_URL_TEST }}
          NEXT_PUBLIC_WEB_URL: ${{ github.ref_name == 'main' && secrets.NEXT_PUBLIC_WEB_URL || secrets.NEXT_PUBLIC_WEB_URL_TEST }}
          PORT: ${{ github.ref_name == 'main' && secrets.PORT || secrets.PORT_TEST }}
          EMAIL: ${{ github.ref_name == 'main' && secrets.EMAIL || secrets.EMAIL_TEST }}
          PASSWORD: ${{ github.ref_name == 'main' && secrets.PASSWORD || secrets.PASSWORD_TEST }}
          PM2_NAME: ${{ github.ref_name == 'main' && secrets.PM2_NAME || secrets.PM2_NAME_TEST }}

  build:
    runs-on: self-hosted
    needs: tests
    defaults:
      run:
        working-directory: ${{ github.ref_name }}

    steps:
      - name: Cache Next.js build artifacts
        uses: actions/cache@v4
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/${{ github.ref_name }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-${{ github.ref_name }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: ${{ runner.os }}-${{ github.ref_name }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
                  
      - name: Build Application
        run: |
          # Clean up previous build outputs but keep the cache
          [ -d ".next" ] && find .next -type f -not -path '*/cache/*' -delete
          npm run build  # Build the application
          pm2 restart pm2.config.cjs
          pm2 save
        env:
          NEXT_PUBLIC_NEXT_ENVIRONMENT: ${{ github.ref_name == 'main' && 'production' || 'testing' }}
          NEXT_PUBLIC_API_URL: ${{ github.ref_name == 'main' && secrets.NEXT_PUBLIC_API_URL || secrets.NEXT_PUBLIC_API_URL_TEST }}
          NEXT_PUBLIC_WEB_URL: ${{ github.ref_name == 'main' && secrets.NEXT_PUBLIC_WEB_URL || secrets.NEXT_PUBLIC_WEB_URL_TEST }}
          PORT: ${{ github.ref_name == 'main' && secrets.PORT || secrets.PORT_TEST }}
          PM2_NAME: ${{ github.ref_name == 'main' && secrets.PM2_NAME || secrets.PM2_NAME_TEST }}

  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Deploy Application
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            sudo mkdir -p /var/www/admin
            DEPLOY_DIR="/var/www/admin"
          else
           sudo mkdir -p /var/www/manage
            DEPLOY_DIR="/var/www/manage"
          fi

          sudo cp -r ~/actions-runner-admin/_work/blog-cms/blog-cms/${{ github.ref_name }}/.next $DEPLOY_DIR/

      - name: Restart Nginx Service
        run: |
          sudo systemctl reload nginx
          sudo systemctl restart nginx
